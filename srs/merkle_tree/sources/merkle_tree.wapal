module merkle_tree_addr::merkle_tree {
    use std::vector;
    use aptos_std::aptos_hash;

    /// Root bytes length isn't 32 bytes
    const E_ROOT_BYTES_LENGTH_MISMATCH: u64 = 1;

    /// Leaf bytes length isn't 32 bytes
    const E_LEAF_BYTES_LENGTH_MISMATCH: u64 = 2;


    struct WhitelistSettings has key {
        merkle_root: vector<u8>,
    }

    fun init_module(admin: &signer) {
        move_to(admin, WhitelistSettings {
            merkle_root: vector[]
        });
    }

    public entry fun set_root(admin: &signer, merkle_root: vector<u8>) acquires WhitelistSettings {
        let settings = borrow_global_mut<WhitelistSettings>(@merkle_tree_addr);
        settings.merkle_root = merkle_root;
    
    }

    #[view]
    public fun get_root(): vector<u8> acquires WhitelistSettings {
        borrow_global<WhitelistSettings>(@merkle_tree_addr).merkle_root
    }

    #[view]
    public fun get_leaf(leaf: vector<u8>): vector<u8>  {
        leaf
    }



    /// Verifies with a given roof and a given leaf for a merkle tree
    #[view]
    public fun verify(proof: vector<vector<u8>>, leaf: vector<u8>): bool acquires WhitelistSettings {
        let computedHash = leaf;
        let root = borrow_global<WhitelistSettings>(@merkle_tree_addr).merkle_root;

        assert!(vector::length(&root) == 32, E_ROOT_BYTES_LENGTH_MISMATCH);
        assert!(vector::length(&leaf) == 32, E_LEAF_BYTES_LENGTH_MISMATCH);

        // Go through each proof element, and ensure they're ordered correctly to hash (largest last)
        vector::for_each(proof, |proof_element| {
            let combined = if (compare_vector(&computedHash, &proof_element)) {
                let  temp = vector::empty<u8>();
                vector::append(&mut temp, computedHash);
                vector::append(&mut temp, proof_element);
                temp
            } else {
                let  temp = vector::empty<u8>();
                vector::append(&mut temp, proof_element);
                vector::append(&mut temp, computedHash);
                temp
            };
            computedHash = aptos_hash::keccak256(combined);
        });
        computedHash == root
    }
    
    /// Returns true if a is greater than b
    fun compare_vector(a: &vector<u8>, b: &vector<u8>): bool {
        let index = 0;
        let length = vector::length(a);

        // If vector b is ever greater than vector a, return true, otherwise false
        while (index < length) {
            if (*vector::borrow(a, index) > *vector::borrow(b, index)) {
                return false
            };
            if (*vector::borrow(a, index) < *vector::borrow(b, index)) {
                return true
            };
            index = index + 1;
        };

        // If exactly the same, it's always true (though it shouldn't matter)
        true
    }

    #[view]
    public fun return_proof(proof: vector<vector<u8>>): vector<vector<u8>> {
        proof
    }



    #[test_only]
    use std::debug;

    #[test(deployer = @merkle_tree_addr)]
    fun test_merkle(deployer: signer) acquires WhitelistSettings{
        let leaf1 =  x"5f16f4c7f149ac4f9510d9cf8cf384038ad348b3bcdc01915f95de12df9d1b02";
        let leaf2 = x"5f16f4c7f149ac4f9510d9cf8cf384038ad348b3bcdc01915f95de12df9d1b02";
        let leaf3 = x"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
        let leaf4 = x"0da6e343c6ae1c7615934b7a8150d3512a624666036c06a92a56bbdaa4099751";
        // finding out the root
        let root1 = find_root(leaf1, leaf2);
        let root2 = find_root(leaf3, leaf4);
        let final_root = find_root(root1, root2);
        //the proofs
        let proof1 = vector[leaf2, root2];
        let proof2 = vector[leaf1, root2];
        let proof3 = vector[leaf4, root1];
        let proof4 = vector[leaf3, root1];

        init_module(&deployer);
        set_root(&deployer, final_root);

        let verified = verify(proof1, leaf1);

        debug::print(&verified);
        
        //here
        // assert!(verify(proof1, final_root, leaf1), 99);
        // assert!(verify(proof2, final_root, leaf2), 100);
        // assert!(verify(proof3, final_root, leaf3), 101);
        // assert!(verify(proof4, final_root, leaf4), 102);
    }

    // #[test]
    // #[expected_failure(abort_code = 196609, location = Self)]
    // fun test_failure() {
    //     let leaf1 = x"d4dee0beab2d53f2cc83e567171bd2820e49898130a22622b10ead383e90bd77";
    //     let leaf2 = x"5f16f4c7f149ac4f9510d9cf8cf384038ad348b3bcdc01915f95de12df9d1b02";
    //     let leaf3 = x"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    //     let leaf4 = x"0da6e343c6ae1c7615934b7a8150d3512a624666036c06a92a56bbdaa4099751";
    //     // finding out the root
    //     let root1 = find_root(leaf1, leaf2);
    //     let root2 = find_root(leaf3, leaf4);
    //     let final_root = find_root(root1, root2);
    //     //the proofs
    //     let proof1 = vector[leaf2, root2];
    //     let proof2 = vector[leaf1, root2];
    //     let proof3 = vector[leaf4, root1];
    //     let proof4 = vector[leaf3, root1];
    //     //here
    //     // assert!(
    //     //     verify(proof1, final_root, x"0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"),
    //     //     196609
    //     // );
    //     // assert!(
    //     //     verify(proof2, final_root, x"0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"),
    //     //     196609
    //     // );
    //     // assert!(
    //     //     verify(proof3, final_root, x"0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"),
    //     //     196609
    //     // );
    //     // assert!(
    //     //     verify(proof4, final_root, x"0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"),
    //     //     196609
    //     // );
    // }

    /// Finds the root of the merkle proof
    public fun find_root(leaf1: vector<u8>, leaf2: vector<u8>): vector<u8> {
        let root = vector<u8>[];
        if (compare_vector(&leaf1, &leaf2)) {
            vector::append(&mut root, leaf1);
            vector::append(&mut root, leaf2);
            root = aptos_hash::keccak256(root);
        }
        else {
            vector::append(&mut root, leaf2);
            vector::append(&mut root, leaf1);
            root = aptos_hash::keccak256(root);
        };
        root
    }
}